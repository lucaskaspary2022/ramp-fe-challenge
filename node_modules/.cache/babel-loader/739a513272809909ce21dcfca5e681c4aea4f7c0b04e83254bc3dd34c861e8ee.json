{"ast":null,"code":"var _jsxFileName = \"/Users/lucaskaspary/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = ({\n  transaction,\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval\n}) => {\n  _s();\n  const [approved, setApproved] = useState(transaction.approved);\n  useEffect(() => {}, [third]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: loading,\n      onChange: () => setApproved(true)\n      // onChange={ async (newValue) => {\n      //   await consumerSetTransactionApproval({\n      //     transactionId: transaction.id,\n      //     newValue,\n      //   })\n\n      //   setApproved(true)\n      // }}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionPane, \"wsyYMam5KrIgKc1piZYNFLCYKBI=\");\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\nvar _c;\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","useEffect","InputCheckbox","jsxDEV","_jsxDEV","TransactionPane","transaction","loading","setTransactionApproval","consumerSetTransactionApproval","_s","approved","setApproved","third","className","children","merchant","fileName","_jsxFileName","lineNumber","columnNumber","moneyFormatter","format","amount","employee","firstName","lastName","date","id","checked","disabled","onChange","_c","Intl","NumberFormat","style","currency","$RefreshReg$"],"sources":["/Users/lucaskaspary/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n  const [approved, setApproved] = useState(transaction.approved)\n\n  useEffect(() => {\n\n  }, [third])\n  \n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={approved}\n        disabled={loading}\n        onChange={() => setApproved(true)}\n        // onChange={ async (newValue) => {\n        //   await consumerSetTransactionApproval({\n        //     transactionId: transaction.id,\n        //     newValue,\n        //   })\n\n        //   setApproved(true)\n        // }}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGhD,OAAO,MAAMC,eAAyC,GAAGA,CAAC;EACxDC,WAAW;EACXC,OAAO;EACPC,sBAAsB,EAAEC;AAC1B,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACM,WAAW,CAACK,QAAQ,CAAC;EAE9DV,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAE,CAACY,KAAK,CAAC,CAAC;EAGX,oBACET,OAAA;IAAKU,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBX,OAAA;MAAKU,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCX,OAAA;QAAGU,SAAS,EAAC,UAAU;QAAAC,QAAA,GAAET,WAAW,CAACU,QAAQ,EAAC,GAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnDhB,OAAA;QAAAW,QAAA,EAAIM,cAAc,CAACC,MAAM,CAAChB,WAAW,CAACiB,MAAM;MAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClDhB,OAAA;QAAGU,SAAS,EAAC,8BAA8B;QAAAC,QAAA,GACxCT,WAAW,CAACkB,QAAQ,CAACC,SAAS,EAAC,GAAC,EAACnB,WAAW,CAACkB,QAAQ,CAACE,QAAQ,EAAC,KAAG,EAACpB,WAAW,CAACqB,IAAI;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNhB,OAAA,CAACF,aAAa;MACZ0B,EAAE,EAAEtB,WAAW,CAACsB,EAAG;MACnBC,OAAO,EAAElB,QAAS;MAClBmB,QAAQ,EAAEvB,OAAQ;MAClBwB,QAAQ,EAAEA,CAAA,KAAMnB,WAAW,CAAC,IAAI;MAChC;MACA;MACA;MACA;MACA;;MAEA;MACA;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAAV,EAAA,CArCYL,eAAyC;AAAA2B,EAAA,GAAzC3B,eAAyC;AAuCtD,MAAMgB,cAAc,GAAG,IAAIY,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EACpDC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAAA,IAAAJ,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}